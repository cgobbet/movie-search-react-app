{"version":3,"sources":["MovieCard.js","SearchMovies.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","className","key","id","src","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","error","onSubmit","type","name","placeholder","value","onChange","target","filter","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kPAEe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAClC,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAMG,IAC/B,yBAAKF,UAAU,cACbG,IAAG,0DAAqDJ,EAAMK,aAC9DC,IAAKN,EAAMO,MAAQ,YAErB,yBAAKN,UAAU,iBACb,wBAAIA,UAAU,eAAeD,EAAMO,OACnC,uBAAGN,UAAU,cAAb,iBAAyCD,EAAMQ,cAC/C,uBAAGP,UAAU,cAAb,WAAmCD,EAAMS,cACzC,uBAAGR,UAAU,cAAcD,EAAMU,YCV1B,SAASC,IAAe,MAGXC,mBAAS,IAHE,mBAG9BC,EAH8B,KAGvBC,EAHuB,OAKTF,mBAAS,IALA,mBAK9BG,EAL8B,KAKtBC,EALsB,KAO/BC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBAEIC,EAHa,kHAGoGR,EAHpG,gDAMCS,MAAMD,GANP,cAMXE,EANW,gBAOEA,EAAIC,OAPN,OAOXC,EAPW,OAQjBT,EAAUS,EAAKC,SARE,kDAUjBC,QAAQC,MAAR,MAViB,0DAAH,sDAclB,OACE,oCACE,0BAAM3B,UAAU,OAAO4B,SAAUZ,GAAc,6BAE7C,2BAAOhB,UAAU,QAAQ6B,KAAK,OAAOC,KAAK,QACxCC,YAAY,0DACZC,MAAOpB,EAAOqB,SAAU,SAAChB,GAAD,OAAOJ,EAASI,EAAEiB,OAAOF,UAEnD,4BAAQhC,UAAU,SAAS6B,KAAK,UAAhC,WAEF,yBAAK7B,UAAU,aACZc,EAAOqB,QAAO,SAAApC,GAAK,OAAIA,EAAMK,eAAagC,KAAI,SAAArC,GAAK,OAClD,kBAACD,EAAD,CAAWC,MAAOA,EAAOE,IAAKF,EAAMG,UCV/BmC,MApBf,WACE,OAEE,yBAAKrC,UAAU,OACb,4BAAQA,UAAU,cAMhB,8CAEF,yBAAKA,UAAU,aAEb,kBAACU,EAAD,SCRY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLD,QAAQC,MAAMA,EAAM4B,a","file":"static/js/main.31d22260.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function MovieCard({ movie }) {\n  return (\n    <div className=\"card\" key={movie.id} >\n      <img className=\"card--image\"\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n        alt={movie.title + ' poster'}\n      />\n      <div className=\"card--content\">\n        <h3 className=\"card--title\">{movie.title}</h3>\n        <p className=\"movie-meta\">RELEASE DATE: {movie.release_date}</p>\n        <p className=\"movie-meta\">RATING: {movie.vote_average}</p>\n        <p className=\"card--desc\">{movie.overview}</p>\n      </div>\n\n    </div>\n  );\n};  ","import React, { useState } from \"react\";\nimport MovieCard from './MovieCard.js';\n\nexport default function SearchMovies() {\n\n  //states- input query, movies\n  const [query, setQuery] = useState('');\n  //create the state for movies, and update that state appropriate\n  const [movies, setMovies] = useState([]);\n\n  const searchMovies = async (e) => {\n    e.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=a6c0f50838ed78cf34adafa914a97163&language=en-US&query=${query}&page=1&include_adult=true`;\n\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      setMovies(data.results);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={searchMovies}><br />\n        {/* <label className=\"label\" htmlFor=\"query\">Movie Name</label> */}\n        <input className=\"input\" type=\"text\" name=\"query\"\n          placeholder=\"Insert the movie you want to search, i.e. Jurassic Park\"\n          value={query} onChange={(e) => setQuery(e.target.value)}\n        />\n        <button className=\"button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"card-list\">\n        {movies.filter(movie => movie.poster_path).map(movie => (\n          <MovieCard movie={movie} key={movie.id} />\n        ))}\n      </div>\n    </>\n  )\n}","import React from 'react';\n// import YoutubeBackground from 'react-youtube-background'\n// import logo from './logo.svg';\nimport './App.css';\nimport SearchMovies from './SearchMovies';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img\n          src='/public/zFlix_192_white.png'\n          className='App-logo'\n          alt='zFlix Logo'>\n          </img> */}\n        <h1>Search-O-Flix</h1>\n      </header>\n      <div className=\"container\">\n        {/* <h1 className=\"title\">Search your movie</h1> */}\n        <SearchMovies />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import SearchMovies from \"./SearchMovies\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <SearchMovies /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}